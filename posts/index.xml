<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on test</title>
    <link>http://127.0.0.1:1313/posts/</link>
    <description>Recent content in Posts on test</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Sep 2021 16:02:42 +0000</lastBuildDate>
    
        <atom:link href="http://127.0.0.1:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>effective go学习及golang其他问题衍生</title>
      <link>http://127.0.0.1:1313/posts/effective-go%E5%AD%A6%E4%B9%A0%E5%8F%8Agolang%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98%E8%A1%8D%E7%94%9F/</link>
      <pubDate>Wed, 15 Sep 2021 16:02:42 +0000</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/effective-go%E5%AD%A6%E4%B9%A0%E5%8F%8Agolang%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98%E8%A1%8D%E7%94%9F/</guid>
      <description>&lt;h2 id=&#34;effective-go学习及golang其他问题衍生&#34;&gt;effective go学习及golang其他问题衍生&lt;/h2&gt;
&lt;h3 id=&#34;go-routine实现&#34;&gt;Go routine实现&lt;/h3&gt;
&lt;h3 id=&#34;go-channel&#34;&gt;Go channel&lt;/h3&gt;
&lt;h5 id=&#34;一些疑问&#34;&gt;一些疑问&lt;/h5&gt;
&lt;p&gt;channel关闭两次&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会panic
往已经关闭的channel中写数据&lt;/li&gt;
&lt;li&gt;panic
从已关闭的channel中读数据&lt;/li&gt;
&lt;li&gt;无缓冲区：不会panic，读到的是channel对象的初值&lt;/li&gt;
&lt;li&gt;有缓冲区：可以继续读取数据，直到读完，读完按照第一条处理。&lt;/li&gt;
&lt;li&gt;可以按照类似map[key]的形式判断当前channel是否已关闭&lt;/li&gt;
&lt;li&gt;如果不判断是否已经读完了，则会一直执行第一条。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;反射&#34;&gt;反射&lt;/h3&gt;
&lt;h5 id=&#34;基本概念&#34;&gt;基本概念&lt;/h5&gt;
&lt;p&gt;实现三种功能（3定律）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过接口获取接口原来的对象&lt;/li&gt;
&lt;li&gt;通过对象获取它实现的接口&lt;/li&gt;
&lt;li&gt;修改被反射的对象（只有当传入对象的值是可设置的，才能修改）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;map&#34;&gt;Map&lt;/h2&gt;
&lt;p&gt;hash，使用拉链法解决哈希碰撞问题，基本概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;装载因子&lt;/strong&gt;：数组中元素的数量与数组大小的比值，随着装载因子的增加，线性探测的平均用时就会逐渐增加&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;溢出桶&lt;/strong&gt;：为了解决频繁扩容问题的设计，&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本数据结构&#34;&gt;基本数据结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hmap：Map的数据结构，主要包含count/B/buckets/oldbuckets/extra字段&lt;/li&gt;
&lt;li&gt;bmap：bucket的实际承载结构，一个bucket最多包含8个键值对，多的放到溢出桶里面。&lt;/li&gt;
&lt;li&gt;extra：溢出桶，在内存空间上在bmap之后，用于减少扩容的频率&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;操作&#34;&gt;操作&lt;/h4&gt;
&lt;h5 id=&#34;扩容&#34;&gt;扩容&lt;/h5&gt;
&lt;p&gt;触发条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;装载因子超过6.5&lt;/li&gt;
&lt;li&gt;溢出桶使用过多：等量扩容
频繁的大量创建删除，可能最终容量还够，但是由于创建时使用了溢出桶，又没有溢出桶的回收机制的话，导致这部分溢出桶一直存在，可能引发内存泄露。
关注点：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;有保护机制，由于不是原子的过程，扩容时需判断当前是不是已经处在扩容状态，避免二次扩容的混乱。&lt;/li&gt;
&lt;li&gt;有oldbuckets和oldoverflow，在扩容过程中保存老的桶和溢出桶&lt;/li&gt;
&lt;li&gt;扩容过程大概是
&lt;ol&gt;
&lt;li&gt;创建新的bucket，老的bucket存到obdbuckets&lt;/li&gt;
&lt;li&gt;对老桶的数据再分配，由于老桶肯定是有拉链在了，需要把老桶的东西分到新的两个桶里面，即分流。&lt;/li&gt;
&lt;li&gt;扩容期间，map的读写操作都是在旧桶上操作，并且触发旧桶的内容复制到新的桶内。&lt;/li&gt;
&lt;li&gt;扩容不是在需要扩容的时候一波扩玩，而是创建了之后在有写或者删除操作的时候才执行某个的扩容，这样防止瞬间性能的抖动。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;读写设计&#34;&gt;读写设计&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;使用hash函数和种子对key作hash&lt;/li&gt;
&lt;li&gt;hash后，用低位找到对应的桶号（这个根据当前桶数量具体看）&lt;/li&gt;
&lt;li&gt;高8位用来作为tophash，用于与当前桶中的tophash作比较，加速查找（显然比较8位比比较key值快得多）&lt;/li&gt;
&lt;li&gt;每个桶中最多放8个数据，多出来的放到溢出桶里&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sync包及使用&#34;&gt;Sync包及使用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sync&lt;/code&gt;包提供了并发编程中相关的一些基础能力，相当于一种同步机制。提供的基本能力包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutex：锁&lt;/li&gt;
&lt;li&gt;RWMutex：读写锁&lt;/li&gt;
&lt;li&gt;WaitGroup：等待多个协程执行结束&lt;/li&gt;
&lt;li&gt;Once：全局执行一次&lt;/li&gt;
&lt;li&gt;Cond：condition的缩写。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;waitgroup&#34;&gt;WaitGroup&lt;/h4&gt;
&lt;p&gt;主要包含&lt;code&gt;Add\Done\Wait&lt;/code&gt;，使用方法就是先&lt;code&gt;Add&lt;/code&gt;，表示要执行多少个（初始化计数器）
&lt;code&gt;Done&lt;/code&gt;就是调&lt;code&gt;Add(-1)&lt;/code&gt;，计数器=0时，wait返回结果。表示执行结束&lt;/p&gt;
&lt;h4 id=&#34;mutex&#34;&gt;Mutex&lt;/h4&gt;
&lt;p&gt;Mutex即golang中的lock，是&lt;code&gt;Sync&lt;/code&gt;包中最基本的部分，也是比较复杂的部分，主要就是实现了一个锁。而读写锁、Cond、Once，都是基于它实现的。&lt;/p&gt;
&lt;h5 id=&#34;几个概念&#34;&gt;几个概念&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;饥饿状态&lt;/strong&gt;：golang锁中有饥饿状态的概念，表示有协成等待了1ms以上。
&lt;ul&gt;
&lt;li&gt;本质上是为了解决自旋可能带来的协成饿死的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自旋&lt;/strong&gt;：想要拿锁，发现锁位已经置1的情况下，就cpu空跑一小段时间（&lt;strong&gt;30次pause&lt;/strong&gt;），再尝试拿锁；这里相当于sleep了一小会儿，但是它没有协成切换，没有转入阻塞；也就不会有协成切换的开销。
&lt;ul&gt;
&lt;li&gt;因为自旋其实比较占cpu，所以进入自旋条件也比较苛刻，golang中自旋条件：
&lt;ul&gt;
&lt;li&gt;cpu数大于1&lt;/li&gt;
&lt;li&gt;等待调度队列为空&lt;/li&gt;
&lt;li&gt;调度机制允许多个process（GPM机制）&lt;/li&gt;
&lt;li&gt;自旋次数最多4次，超过就进入阻塞状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;锁的状态标记&#34;&gt;锁的状态标记&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;lock:&lt;/strong&gt; 32，锁定状态标记&lt;/li&gt;
&lt;li&gt;**Woken：**31，唤醒中？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Starving：&lt;/strong&gt; 30，饥饿状态&lt;/li&gt;
&lt;li&gt;**waitersCount：**0-29，等待队列数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;lock和unlock&#34;&gt;lock和unlock&lt;/h5&gt;
&lt;p&gt;lock&amp;amp;自旋&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断当前能否进入自旋，即lock&amp;amp;！starving&lt;/li&gt;
&lt;li&gt;进入自旋，等待释放&lt;/li&gt;
&lt;li&gt;计算锁的新的状态&lt;/li&gt;
&lt;li&gt;更新锁状态并获取锁
lock&amp;amp;非自旋&lt;/li&gt;
&lt;li&gt;进入队列，等待&lt;/li&gt;
&lt;li&gt;锁释放后，唤醒一个等待的协成&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;自旋进入和退出&#34;&gt;自旋进入和退出&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;如果goroutine等待时间超过1ms，切换饥饿模式&lt;/li&gt;
&lt;li&gt;如果到队列中最后一个goroutine，或者当前goroutine等待时间小于1ms，从饥饿模式退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/#mutex&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;同步原语与锁&lt;/a&gt;

&lt;a href=&#34;https://my.oschina.net/renhc/blog/2876211&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;golang互斥锁实现剖析&lt;/a&gt;

&lt;a href=&#34;https://juejin.im/post/6844904024748064781&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;图解golang读写锁&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>test new blog</title>
      <link>http://127.0.0.1:1313/posts/2021-09-15-test-new-blog/</link>
      <pubDate>Wed, 15 Sep 2021 15:59:55 +0000</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/2021-09-15-test-new-blog/</guid>
      <description>&lt;h3 id=&#34;test&#34;&gt;test&lt;/h3&gt;
&lt;p&gt;new blog from netlify&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>